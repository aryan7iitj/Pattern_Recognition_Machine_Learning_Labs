# -*- coding: utf-8 -*-
"""B21EE012_Lab_Assignment_11.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZPbi7NaKZNKg9rNR9qmyVHS2BGccODoN

#Question 1
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn import svm
from sklearn import metrics
import seaborn as sns
from sklearn.decomposition import PCA
from sklearn.model_selection import train_test_split

df = pd.read_csv('/content/drive/MyDrive/Lab_Data/data_banknote_authentication.txt')
df.columns = ['variance of Wavelet Transformed image','skewness of Wavelet Transformed image','curtosis of Wavelet Transformed image','entropy of image','class']
df

def normalize(df):
  #using The min-max feature scaling for normalizating columns individuallly whose data type is integer
  for column in df.columns:
    if df[column].dtype != object:
      df[column] = (df[column] - df[column].min())/(df[column].max()-df[column].min())
  return df

df = normalize(df)
df

X = df.drop('class',axis=1)
y = df['class']

pca = PCA(n_components=2)
X = pca.fit_transform(X)

X_train, X_rem, y_train, y_rem = train_test_split(X,y, train_size=0.7)
X_valid, X_test, y_valid, y_test = train_test_split(X_rem,y_rem, test_size=0.2)

"""#Question 2"""

def plot_db(svc_model,X_train,y_train):
  plt.figure(figsize=(5, 4))
  sns.scatterplot(x=X_train[:, 0], y=X_train[:, 1], hue=y_train, s=8);
  
  w = svc_model.coef_[0]           
  b = svc_model.intercept_[0]      
  x_points = np.linspace(-1, 1)    
  y_points = -(w[0] / w[1]) * x_points - b / w[1]  

  plt.plot(x_points, y_points, c='r');

  plt.scatter(svc_model.support_vectors_[:, 0],svc_model.support_vectors_[:, 1], s=50, facecolors='none', edgecolors='k', alpha=.5);

  w_hat = svc_model.coef_[0] / (np.sqrt(np.sum(svc_model.coef_[0] ** 2)))

  margin = 1 / np.sqrt(np.sum(svc_model.coef_[0] ** 2))

  decision_boundary_points = np.array(list(zip(x_points, y_points)))
  points_of_line_above = decision_boundary_points + w_hat * margin
  points_of_line_below = decision_boundary_points - w_hat * margin

  plt.plot(points_of_line_above[:, 0], points_of_line_above[:, 1], 'b--', linewidth=2)

  plt.plot(points_of_line_below[:, 0], points_of_line_below[:, 1], 'g--', linewidth=2)

clf1 = svm.SVC(C=0.03125,kernel = 'linear')
clf1.fit(X_train,y_train)
y_pred1 = clf1.predict(X_test)

print("Accuracy:",metrics.accuracy_score(y_test, y_pred1))

plot_db(clf1,X_train,y_train)

clf2 = svm.SVC(C=0.5,kernel = 'linear')
clf2.fit(X_train,y_train)
y_pred2 = clf2.predict(X_test)

print("Accuracy:",metrics.accuracy_score(y_test, y_pred2))

plot_db(clf2,X_train,y_train)

clf3 = svm.SVC(C=8,kernel = 'linear')
clf3.fit(X_train,y_train)
y_pred3 = clf3.predict(X_test)

print("Accuracy:",metrics.accuracy_score(y_test, y_pred3))

plot_db(clf3,X_train,y_train)

clf4 = svm.SVC(C=128,kernel = 'linear')
clf4.fit(X_train,y_train)
y_pred4 = clf4.predict(X_test)

print("Accuracy:",metrics.accuracy_score(y_test, y_pred4))

plot_db(clf4,X_train,y_train)

clf5 = svm.SVC(C=32768,kernel = 'linear')
clf5.fit(X_train,y_train)
y_pred5 = clf5.predict(X_test)

print("Accuracy:",metrics.accuracy_score(y_test, y_pred5))

plot_db(clf5,X_train,y_train)

"""#Question 3"""

def plot_db1(clf,X,Y,cmap = 'Paired_r'):
  h = 0.01
  x_min, x_max = X[:,0].min() - 10*h, X[:,0].max() + 10*h
  y_min, y_max = X[:,1].min() - 10*h, X[:,1].max() + 10*h

  xx,yy = np.meshgrid(np.arange(x_min,x_max,h),np.arange(y_min,y_max,h))
  z = clf.predict(np.c_[xx.ravel(),yy.ravel()])
  z = z.reshape(xx.shape)

  plt.figure(figsize = (5,5))
  plt.contourf(xx,yy,z,cmap=cmap,alpha = 0.5)
  plt.contour(xx,yy,z,colors = 'k',linewidths = 0.5)
  plt.scatter(X[:,0],X[:,1],c = Y , cmap = cmap , edgecolors = 'k')

clf6 = svm.SVC(kernel = 'poly')
clf6.fit(X_train,y_train)
y_pred6 = clf6.predict(X_test)

print("Accuracy:",metrics.accuracy_score(y_test, y_pred6))

plot_db1(clf6,X_train,y_train)

clf7 = svm.SVC(kernel = 'rbf')
clf7.fit(X_train,y_train)
y_pred7 = clf7.predict(X_test)

print("Accuracy:",metrics.accuracy_score(y_test, y_pred7))

plot_db1(clf7,X_train,y_train)

clf8 = svm.SVC(kernel = 'linear')
clf8.fit(X_train,y_train)
y_pred8 = clf8.predict(X_test)

print("Accuracy:",metrics.accuracy_score(y_test, y_pred8))

plot_db1(clf8,X_train,y_train)